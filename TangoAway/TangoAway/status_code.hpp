#pragma once
#include <cstdint>

enum EStatusCode : int32_t
{
	PREPROCESS_CODE_FILE_PATH_DOES_NOT_EXIST = 0,
	PREPROCESS_CODE_FILE_IS_EMPTY,
	PREPROCESS_SUCCESS,
	PREPROCESS_INVALID_DEFINE_SYNTAX,
	PREPROCESS_COULD_NOT_WRITE_FILE,
	PREPROCESS_MACRO_END_MISSING,
	PREPROCESS_INVALID_MACRO_SYNTAX,
	PREPROCESS_INVALID_IMPORT_SYNTAX,
	PREPROCESS_INVALID_LABEL_SYNTAX,
	PREPROCESS_INVALID_JMP_SYNTAX,
	PREPROCESS_IMPORT_FILE_DOES_NOT_EXIST,
	PREPROCESS_ELSE_END_MISSING,
	PREPROCESS_IF_END_MISSING,
	PARSER_FILE_PATH_DOES_NOT_EXIST,
	PARSER_PRP_FILE_IS_EMPTY,
	PARSER_SUCCESS,
	PARSER_INVALID_INSTRUCTION_SYNTAX,
	PARSER_UNKNOWN_INSTRUCTION_FOUND,
	PARSER_INVALID_INSTRUCTION_DATATYPE,
	PARSER_INVALID_INSTRUCTION_VDR,
	PARSER_INVALID_INSTRUCTION_SOURCE,
	PARSER_INVALID_PRINT_MESSAGE,
	PARSER_INVALID_PRINT_OBJECT,
	PARSER_INVALID_PRINT_TYPE,
	PARSER_INVALID_IF_OPERATOR,
	PARSER_INVALID_END_INSTRUCTION,
	INTERPRETER_INVALID_ENVIRONMENT_POINTER,
	INTERPRETER_INVALID_ENVIRONMENT_NAME,
	INTERPRETER_ENVIRONMENT_DOES_NOT_EXIST,
	INTERPRETER_WINDOWS_API_ERROR,
	INTERPRETER_SUCCESS,
	TEST_FAILED,
	TEST_SUCCESS,
	TEST_UNUSED

};

constexpr auto code_to_str(const EStatusCode status)
{
	std::string ret = {};

	// why no reflexpr?!
	switch( status )
	{
		case PREPROCESS_CODE_FILE_PATH_DOES_NOT_EXIST:
			ret = "PREPROCESS_CODE_FILE_PATH_DOES_NOT_EXIST";
			break;

		case PREPROCESS_CODE_FILE_IS_EMPTY:
			ret = "PREPROCESS_CODE_FILE_IS_EMPTY";
			break;

		case PREPROCESS_SUCCESS:
			ret = "PREPROCESS_SUCCESS";
			break;

		case PREPROCESS_INVALID_DEFINE_SYNTAX:
			ret = "PREPROCESS_INVALID_DEFINE_SYNTAX";
			break;

		case PREPROCESS_COULD_NOT_WRITE_FILE:
			ret = "PREPROCESS_COULD_NOT_WRITE_FILE";
			break;

		case PREPROCESS_MACRO_END_MISSING:
			ret = "PREPROCESS_MACRO_END_MISSING";
			break;

		case PREPROCESS_INVALID_MACRO_SYNTAX:
			ret = "PREPROCESS_INVALID_MACRO_SYNTAX";
			break;

		case PREPROCESS_INVALID_IMPORT_SYNTAX:
			ret = "PREPROCESS_INVALID_IMPORT_SYNTAX";
			break;

		case PREPROCESS_INVALID_LABEL_SYNTAX:
			ret = "PREPROCESS_INVALID_LABEL_SYNTAX";
			break;

		case PREPROCESS_INVALID_JMP_SYNTAX:
			ret = "PREPROCESS_INVALID_JMP_SYNTAX";
			break;

		case PREPROCESS_ELSE_END_MISSING:
			ret = "PREPROCESS_ELSE_END_MISSING";
			break;

		case PREPROCESS_IF_END_MISSING:
			ret = "PREPROCESS_IF_END_MISSING";
			break;

		case PARSER_FILE_PATH_DOES_NOT_EXIST:
			ret = "PARSER_FILE_PATH_DOES_NOT_EXIST";
			break;

		case PREPROCESS_IMPORT_FILE_DOES_NOT_EXIST:
			ret = "PREPROCESS_IMPORT_FILE_DOES_NOT_EXIST";
			break;

		case PARSER_PRP_FILE_IS_EMPTY:
			ret = "PARSER_PRP_FILE_IS_EMPTY";
			break;

		case PARSER_SUCCESS:
			ret = "PARSER_SUCCESS";
			break;

		case PARSER_INVALID_INSTRUCTION_SYNTAX:
			ret = "PARSER_INVALID_INSTRUCTION_SYNTAX";
			break;

		case PARSER_UNKNOWN_INSTRUCTION_FOUND:
			ret = "PARSER_UNKNOWN_INSTRUCTION_FOUND";
			break;

		case PARSER_INVALID_INSTRUCTION_DATATYPE:
			ret = "PARSER_INVALID_INSTRUCTION_DATATYPE";
			break;

		case PARSER_INVALID_INSTRUCTION_VDR:
			ret = "PARSER_INVALID_INSTRUCTION_VDR";
			break;

		case PARSER_INVALID_INSTRUCTION_SOURCE:
			ret = "PARSER_INVALID_INSTRUCTION_SOURCE";
			break;

		case PARSER_INVALID_PRINT_MESSAGE:
			ret = "PARSER_INVALID_PRINT_MESSAGE";
			break;

		case PARSER_INVALID_PRINT_OBJECT:
			ret = "PARSER_INVALID_PRINT_OBJECT";
			break;

		case PARSER_INVALID_PRINT_TYPE:
			ret = "PARSER_INVALID_PRINT_TYPE";
			break;

		case PARSER_INVALID_IF_OPERATOR:
			ret = "PARSER_INVALID_IF_OPERATOR";
			break;

		case PARSER_INVALID_END_INSTRUCTION:
			ret = "PARSER_INVALID_END_INSTRUCTION";
			break;

		case INTERPRETER_INVALID_ENVIRONMENT_POINTER:
			ret = "INTERPRETER_INVALID_ENVIRONMENT_POINTER";
			break;

		case INTERPRETER_INVALID_ENVIRONMENT_NAME:
			ret = "INTERPRETER_INVALID_ENVIRONMENT_NAME";
			break;

		case INTERPRETER_ENVIRONMENT_DOES_NOT_EXIST:
			ret = "INTERPRETER_ENVIRONMENT_DOES_NOT_EXIST";
			break;

		case INTERPRETER_WINDOWS_API_ERROR:
			ret = "INTERPRETER_WINDOWS_API_ERROR";
			break;

		case INTERPRETER_SUCCESS:
			ret = "INTERPRETER_SUCCESS";
			break;

		case TEST_FAILED:
			ret = "TEST_FAILED";
			break;

		case TEST_SUCCESS:
			ret = "TEST_SUCCESS";
			break;

		case TEST_UNUSED:
			ret = "TEST_UNUSED";
			break;

		default:
			ret = "UNIMPLEMENTED_STATUS_CODE";
			break;
			
	}

	return ret;
}
